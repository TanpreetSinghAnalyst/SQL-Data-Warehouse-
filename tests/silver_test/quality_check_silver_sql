USE DataWarehouse;
GO

/*
===============================================================================
Post-Test Script: Silver Layer
===============================================================================
Script Purpose:
    This script performs post-load validation checks on the Silver schema 
    after clean data has been inserted. 

    Focus Areas:
        - Null / duplicate detection
        - Data standardization & consistency
        - Referential integrity
        - Business rule validation
===============================================================================
*/

-- =============================================================================
-- Drop & Create: silver.crm_sales_details
-- =============================================================================
IF OBJECT_ID('silver.crm_sales_details', 'U') IS NOT NULL
    DROP TABLE silver.crm_sales_details;
GO

CREATE TABLE silver.crm_sales_details (
    sls_ord_num      NVARCHAR(50),
    sls_prd_key      NVARCHAR(50),
    sls_cust_id      INT,
    sls_order_dt     DATE,
    sls_ship_dt      DATE,
    sls_due_dt       DATE,
    sls_sales        INT,
    sls_quantity     INT,
    sls_price        INT,
    dwh_create_date  DATETIME2 DEFAULT GETDATE()
);
GO

/*==============================================================================
   Data Quality Checks on Silver Layer
   Table: silver.crm_cust_info
==============================================================================*/

-- 1. Check for Nulls & Duplicates in Primary Key (cst_id)
-- Expectation: No duplicates or nulls should exist
SELECT 
    cst_id,
    COUNT(*) AS total_IDs
FROM silver.crm_cust_info
GROUP BY cst_id
HAVING COUNT(*) > 1 OR cst_id IS NULL;

-- 2. Check for Unwanted Spaces in FirstName
-- Expectation: No leading/trailing spaces
SELECT cst_firstname  
FROM silver.crm_cust_info
WHERE cst_firstname <> TRIM(cst_firstname);

-- 3. Check for Unwanted Spaces in LastName
-- Expectation: No leading/trailing spaces
SELECT cst_lastname  
FROM silver.crm_cust_info
WHERE cst_lastname <> TRIM(cst_lastname);

-- 4. Validate Standardized Marital Status Values
-- Expectation: Only ['Married', 'Single', 'N/A']
SELECT DISTINCT cst_marital_status
FROM silver.crm_cust_info;

-- 5. Validate Standardized Gender Values
-- Expectation: Only ['Male', 'Female', 'N/A']
SELECT DISTINCT cst_gndr
FROM silver.crm_cust_info;


/*==============================================================================
   Data Quality Checks on Silver Layer
   Table: silver.crm_prd_info
==============================================================================*/

-- 1. Check for Nulls & Duplicates in Primary Key (prd_id)
SELECT 
    prd_id,
    COUNT(*) AS record_count
FROM silver.crm_prd_info
GROUP BY prd_id
HAVING COUNT(*) > 1;

-- 2. Validate prd_key with Reference Table (silver.erp_px_cat_g1v2)
-- Expectation: First 5 characters of prd_key must exist in reference table
SELECT * 
FROM silver.erp_px_cat_g1v2;

-- 3. Check for Unwanted Spaces in Product Name
SELECT prd_nm
FROM silver.crm_prd_info
WHERE prd_nm <> TRIM(prd_nm);

-- 4. Check for Nulls or Negative Values in Product Cost
SELECT prd_cost
FROM silver.crm_prd_info
WHERE prd_cost < 0 OR prd_cost IS NULL;

-- 5. Review Standardization of Product Line Values
SELECT DISTINCT prd_line
FROM silver.crm_prd_info;

-- 6. Validate Product Date Order
-- Expectation: prd_end_dt >= prd_start_dt
SELECT *
FROM silver.crm_prd_info
WHERE prd_end_dt < prd_start_dt;


/*==============================================================================
   Data Quality Checks on Silver Layer
   Table: silver.crm_sales_details
==============================================================================*/

-- 1. Check for Invalid Date Relationships
SELECT * 
FROM silver.crm_sales_details
WHERE sls_order_dt > sls_ship_dt 
   OR sls_order_dt > sls_due_dt;

-- 2. Check for Null, Zero, or Negative Sales / Quantity / Price
-- Expectation: sls_sales = sls_quantity * sls_price
SELECT 
    sls_sales,
    sls_quantity,
    sls_price
FROM silver.crm_sales_details
WHERE  
    sls_sales IS NULL
    OR sls_quantity IS NULL
    OR sls_price IS NULL
    OR sls_sales <= 0
    OR sls_price <= 0
    OR sls_quantity <= 0
    OR sls_sales <> sls_quantity * sls_price
    OR sls_quantity <> sls_sales / sls_price
    OR sls_price <> sls_sales / sls_quantity;

-- Final check of silver.crm_sales_details
SELECT * 
FROM silver.crm_sales_details;


/*==============================================================================
   Data Quality Checks on Silver Layer
   Table: silver.erp_cust_az12
==============================================================================*/

-- 1. Validate Customer ID (CID) Transformation Rules
-- Expectation: If CID starts with 'NAS', strip the prefix and check consistency
SELECT
    CASE 
        WHEN CID LIKE 'NAS%' THEN SUBSTRING(CID,4,LEN(CID))
        ELSE CID
    END AS CID
FROM silver.erp_cust_az12
WHERE CASE 
        WHEN CID LIKE 'NAS%' THEN SUBSTRING(CID,4,LEN(CID))
        ELSE CID
      END IN (SELECT cst_key FROM silver.crm_cust_info);

-- 2. Check Birth Date Range
-- Expectation: No dates should be in the future
SELECT
    CASE 
        WHEN BDATE > GETDATE() THEN NULL 
        ELSE BDATE 
    END AS BDATE
FROM silver.erp_cust_az12
WHERE BDATE > GETDATE();

-- 3. Review Gender Values
SELECT DISTINCT GEN 
FROM silver.erp_cust_az12;


/*==============================================================================
   Data Quality Checks on Silver Layer
   Table: silver.erp_loc_a101
==============================================================================*/

-- 1. Review CID Values for Standardization
SELECT CID
FROM silver.erp_loc_a101;

-- 2. Data Standardization & Consistency on Country
-- Expectation: Standard country names, replace blanks/NULLs with 'N/A'
SELECT DISTINCT
    CNTRY AS OLD_COUNTRY,
    CASE 
        WHEN UPPER(TRIM(CNTRY)) = 'DE' THEN 'Germany'
        WHEN UPPER(TRIM(CNTRY)) IN ('US','USA') THEN 'United States'
        WHEN UPPER(TRIM(CNTRY)) = '' OR CNTRY IS NULL THEN 'N/A'
        ELSE TRIM(CNTRY)
    END AS CNTRY
FROM silver.erp_loc_a101
ORDER BY CNTRY;


/*==============================================================================
   Data Quality Checks on Silver Layer
   Table: silver.erp_px_cat_g1v2
==============================================================================*/

-- 1. Check for Unwanted Spaces in CAT and SUBCAT
SELECT 
    CAT,
    SUBCAT
FROM silver.erp_px_cat_g1v2
WHERE CAT <> TRIM(CAT) OR SUBCAT <> TRIM(SUBCAT);

-- 2. Review Standardization of Maintenance Field
SELECT DISTINCT MAINTENANCE
FROM silver.erp_px_cat_g1v2;

-- 3. Final Test of silver.erp_px_cat_g1v2
SELECT 
    ID,
    CAT,
    SUBCAT,
    MAINTENANCE
FROM silver.erp_px_cat_g1v2;
